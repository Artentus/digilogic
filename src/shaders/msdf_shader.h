/*
   Copyright 2024 Ryan "rj45" Sanche

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i msdf.glsl -o msdf_shader.h --slang glsl330:glsl300es:hlsl4:metal_macos:metal_ios:metal_sim:wgsl --ifdef

    Overview:

        Shader program 'msdf':
            Get shader desc: msdf_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_coord = 0
            Fragment shader: fs
                Uniform block 'msdfUniform':
                    C struct: msdfUniform_t
                    Bind slot: SLOT_msdfUniform = 0
                Image 'atlas':
                    Type: SG_IMAGETYPE_2D
                    Sample Type: SG_IMAGESAMPLETYPE_FLOAT
                    Bind slot: SLOT_atlas = 0
                Sampler 'samp':
                    Type: SG_SAMPLERTYPE_FILTERING
                    Bind slot: SLOT_samp = 0
                Image Sampler Pair 'atlas_samp':
                    Image: atlas
                    Sampler: samp


    Shader descriptor structs:

        sg_shader msdf = sg_make_shader(msdf_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_coord] = { ... },
                },
            },
            ...});


    Image bind slots, use as index in sg_bindings.vs.images[] or .fs.images[]

        SLOT_atlas = 0;

    Sampler bind slots, use as index in sg_bindings.vs.sampler[] or .fs.samplers[]

        SLOT_samp = 0;

    Bind slot and C-struct for uniform block 'msdfUniform':

        msdfUniform_t msdfUniform = {
            .fgColor = ...;
            .bgColor = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_msdfUniform, &SG_RANGE(msdfUniform));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_coord (0)
#define SLOT_atlas (0)
#define SLOT_samp (0)
#define SLOT_msdfUniform (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct msdfUniform_t {
    HMM_Vec4 fgColor;
    HMM_Vec4 bgColor;
} msdfUniform_t;
#pragma pack(pop)
#if defined(SOKOL_GLCORE33)
/*
    #version 330
    
    layout(location = 0) in vec4 coord;
    out vec2 fragPos;
    out vec2 texUV;
    
    void main()
    {
        gl_Position = vec4(coord.xy, 0.0, 1.0);
        fragPos = coord.xy;
        texUV = coord.zw;
    }
    
*/
static const char vs_source_glsl330[193] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x50,
    0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,
    0x55,0x56,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6f,0x72,0x64,0x2e,
    0x78,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,0x63,0x6f,0x6f,
    0x72,0x64,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x55,0x56,
    0x20,0x3d,0x20,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 330
    
    uniform vec4 msdfUniform[2];
    uniform sampler2D atlas_samp;
    
    in vec2 texUV;
    layout(location = 0) out vec4 fragColor;
    in vec2 fragPos;
    
    float median(float r, float g, float b)
    {
        return max(min(r, g), min(max(r, g), b));
    }
    
    float screenPxRange()
    {
        return max(0.5 * dot(vec2(2.0) / vec2(textureSize(atlas_samp, 0)), vec2(1.0) / fwidth(texUV)), 1.0);
    }
    
    void main()
    {
        vec4 _74 = texture(atlas_samp, texUV);
        float param = _74.x;
        float param_1 = _74.y;
        float param_2 = _74.z;
        fragColor = mix(msdfUniform[1], msdfUniform[0], vec4(clamp(screenPxRange() * (median(param, param_1, param_2) - 0.5) + 0.5, 0.0, 1.0)));
    }
    
*/
static const char fs_source_glsl330[652] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x73,0x64,0x66,0x55,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x32,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x61,0x74,0x6c,
    0x61,0x73,0x5f,0x73,0x61,0x6d,0x70,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,
    0x73,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6d,0x65,0x64,0x69,0x61,0x6e,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x67,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x61,0x78,0x28,0x6d,0x69,0x6e,
    0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,
    0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,0x62,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x50,0x78,0x52,0x61,0x6e,
    0x67,0x65,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x6d,0x61,0x78,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,
    0x76,0x65,0x63,0x32,0x28,0x32,0x2e,0x30,0x29,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x61,0x74,0x6c,
    0x61,0x73,0x5f,0x73,0x61,0x6d,0x70,0x2c,0x20,0x30,0x29,0x29,0x2c,0x20,0x76,0x65,
    0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x66,0x77,0x69,0x64,0x74,0x68,
    0x28,0x74,0x65,0x78,0x55,0x56,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x61,
    0x6d,0x70,0x2c,0x20,0x74,0x65,0x78,0x55,0x56,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x37,
    0x34,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x32,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x6d,
    0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x2c,0x20,0x6d,
    0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x30,0x5d,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,0x73,0x63,0x72,0x65,0x65,0x6e,
    0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,0x29,0x20,0x2a,0x20,0x28,0x6d,0x65,0x64,
    0x69,0x61,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x20,0x2d,0x20,0x30,
    0x2e,0x35,0x29,0x20,0x2b,0x20,0x30,0x2e,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLCORE33 */
#if defined(SOKOL_GLES3)
/*
    #version 300 es
    
    layout(location = 0) in vec4 coord;
    out vec2 fragPos;
    out vec2 texUV;
    
    void main()
    {
        gl_Position = vec4(coord.xy, 0.0, 1.0);
        fragPos = coord.xy;
        texUV = coord.zw;
    }
    
*/
static const char vs_source_glsl300es[196] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,
    0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,
    0x74,0x65,0x78,0x55,0x56,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6f,
    0x72,0x64,0x2e,0x78,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,
    0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,
    0x78,0x55,0x56,0x20,0x3d,0x20,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 msdfUniform[2];
    uniform highp sampler2D atlas_samp;
    
    in highp vec2 texUV;
    layout(location = 0) out highp vec4 fragColor;
    in highp vec2 fragPos;
    
    highp float median(highp float r, highp float g, highp float b)
    {
        return max(min(r, g), min(max(r, g), b));
    }
    
    highp float screenPxRange()
    {
        return max(0.5 * dot(vec2(2.0) / vec2(textureSize(atlas_samp, 0)), vec2(1.0) / fwidth(texUV)), 1.0);
    }
    
    void main()
    {
        highp vec4 _74 = texture(atlas_samp, texUV);
        highp float param = _74.x;
        highp float param_1 = _74.y;
        highp float param_2 = _74.z;
        fragColor = mix(msdfUniform[1], msdfUniform[0], vec4(clamp(screenPxRange() * (median(param, param_1, param_2) - 0.5) + 0.5, 0.0, 1.0)));
    }
    
*/
static const char fs_source_glsl300es[785] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x32,0x5d,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x61,0x74,0x6c,0x61,0x73,0x5f,
    0x73,0x61,0x6d,0x70,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,
    0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,
    0x3b,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6d,
    0x65,0x64,0x69,0x61,0x6e,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x72,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x67,0x2c,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6d,0x61,0x78,0x28,0x6d,0x69,0x6e,0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,0x6d,
    0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,0x62,0x29,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,
    0x61,0x78,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x76,0x65,0x63,
    0x32,0x28,0x32,0x2e,0x30,0x29,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x61,0x74,0x6c,0x61,0x73,0x5f,
    0x73,0x61,0x6d,0x70,0x2c,0x20,0x30,0x29,0x29,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x66,0x77,0x69,0x64,0x74,0x68,0x28,0x74,0x65,
    0x78,0x55,0x56,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x37,0x34,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x61,0x74,0x6c,0x61,0x73,
    0x5f,0x73,0x61,0x6d,0x70,0x2c,0x20,0x74,0x65,0x78,0x55,0x56,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x79,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x6d,0x69,0x78,0x28,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,
    0x31,0x5d,0x2c,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,
    0x30,0x5d,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,0x73,
    0x63,0x72,0x65,0x65,0x6e,0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,0x29,0x20,0x2a,
    0x20,0x28,0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,
    0x29,0x20,0x2d,0x20,0x30,0x2e,0x35,0x29,0x20,0x2b,0x20,0x30,0x2e,0x35,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#endif /* SOKOL_GLES3 */
#if defined(SOKOL_D3D11)
/*
    static float4 gl_Position;
    static float4 coord;
    static float2 fragPos;
    static float2 texUV;
    
    struct SPIRV_Cross_Input
    {
        float4 coord : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 texUV : TEXCOORD0;
        float2 fragPos : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };
    
    void vert_main()
    {
        gl_Position = float4(coord.xy, 0.0f, 1.0f);
        fragPos = coord.xy;
        texUV = coord.zw;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        coord = stage_input.coord;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.fragPos = fragPos;
        stage_output.texUV = texUV;
        return stage_output;
    }
*/
static const char vs_source_hlsl4[684] = {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,
    0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6f,0x72,0x64,0x2e,
    0x78,0x79,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,0x63,
    0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x74,0x65,0x78,
    0x55,0x56,0x20,0x3d,0x20,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x63,
    0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x2e,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,
    0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x74,0x65,0x78,0x55,0x56,0x20,0x3d,0x20,0x74,0x65,0x78,0x55,0x56,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    cbuffer msdfUniform : register(b0)
    {
        float4 _105_fgColor : packoffset(c0);
        float4 _105_bgColor : packoffset(c1);
    };
    
    Texture2D<float4> atlas : register(t0);
    SamplerState samp : register(s0);
    
    static float2 texUV;
    static float4 fragColor;
    static float2 fragPos;
    
    struct SPIRV_Cross_Input
    {
        float2 texUV : TEXCOORD0;
        float2 fragPos : TEXCOORD1;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 fragColor : SV_Target0;
    };
    
    uint2 spvTextureSize(Texture2D<float4> Tex, uint Level, out uint Param)
    {
        uint2 ret;
        Tex.GetDimensions(Level, ret.x, ret.y, Param);
        return ret;
    }
    
    float median(float r, float g, float b)
    {
        return max(min(r, g), min(max(r, g), b));
    }
    
    float screenPxRange()
    {
        uint _46_dummy_parameter;
        return max(0.5f * dot(2.0f.xx / float2(int2(spvTextureSize(atlas, uint(0), _46_dummy_parameter))), 1.0f.xx / fwidth(texUV)), 1.0f);
    }
    
    void frag_main()
    {
        float4 _74 = atlas.Sample(samp, texUV);
        float param = _74.x;
        float param_1 = _74.y;
        float param_2 = _74.z;
        fragColor = lerp(_105_bgColor, _105_fgColor, clamp(mad(screenPxRange(), median(param, param_1, param_2) - 0.5f, 0.5f), 0.0f, 1.0f).xxxx);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        texUV = stage_input.texUV;
        fragPos = stage_input.fragPos;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.fragColor = fragColor;
        return stage_output;
    }
*/
static const char fs_source_hlsl4[1405] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,
    0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x5f,0x31,0x30,0x35,0x5f,0x66,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x31,0x30,0x35,0x5f,0x62,
    0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x63,0x31,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x61,
    0x74,0x6c,0x61,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,
    0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,
    0x65,0x20,0x73,0x61,0x6d,0x70,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,
    0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,
    0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x69,
    0x6e,0x74,0x32,0x20,0x73,0x70,0x76,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,
    0x7a,0x65,0x28,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x3e,0x20,0x54,0x65,0x78,0x2c,0x20,0x75,0x69,0x6e,0x74,0x20,0x4c,
    0x65,0x76,0x65,0x6c,0x2c,0x20,0x6f,0x75,0x74,0x20,0x75,0x69,0x6e,0x74,0x20,0x50,
    0x61,0x72,0x61,0x6d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,
    0x32,0x20,0x72,0x65,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x2e,0x47,
    0x65,0x74,0x44,0x69,0x6d,0x65,0x6e,0x73,0x69,0x6f,0x6e,0x73,0x28,0x4c,0x65,0x76,
    0x65,0x6c,0x2c,0x20,0x72,0x65,0x74,0x2e,0x78,0x2c,0x20,0x72,0x65,0x74,0x2e,0x79,
    0x2c,0x20,0x50,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x72,0x65,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x67,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x6d,0x61,0x78,0x28,0x6d,0x69,0x6e,0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,
    0x20,0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,
    0x62,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,
    0x72,0x65,0x65,0x6e,0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x34,0x36,0x5f,0x64,0x75,0x6d,
    0x6d,0x79,0x5f,0x70,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x61,0x78,0x28,0x30,0x2e,0x35,
    0x66,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x32,0x2e,0x30,0x66,0x2e,0x78,0x78,0x20,
    0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x69,0x6e,0x74,0x32,0x28,0x73,0x70,
    0x76,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x61,0x74,0x6c,
    0x61,0x73,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x30,0x29,0x2c,0x20,0x5f,0x34,0x36,
    0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5f,0x70,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,
    0x29,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x66,0x2e,0x78,0x78,0x20,0x2f,0x20,0x66,
    0x77,0x69,0x64,0x74,0x68,0x28,0x74,0x65,0x78,0x55,0x56,0x29,0x29,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,0x61,0x74,0x6c,
    0x61,0x73,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x61,0x6d,0x70,0x2c,0x20,
    0x74,0x65,0x78,0x55,0x56,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,
    0x5f,0x37,0x34,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6c,0x65,0x72,0x70,0x28,0x5f,0x31,0x30,0x35,
    0x5f,0x62,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x5f,0x31,0x30,0x35,0x5f,0x66,
    0x67,0x43,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x6d,0x61,
    0x64,0x28,0x73,0x63,0x72,0x65,0x65,0x6e,0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,
    0x29,0x2c,0x20,0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x32,0x29,0x20,0x2d,0x20,0x30,0x2e,0x35,0x66,0x2c,0x20,0x30,0x2e,0x35,0x66,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2e,0x78,0x78,
    0x78,0x78,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,
    0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x3d,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x55,0x56,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x50,0x6f,
    0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif /* SOKOL_D3D11 */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 texUV [[user(locn0)]];
        float2 fragPos [[user(locn1)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float4 coord [[attribute(0)]];
    };
    
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
        out.gl_Position = float4(in.coord.xy, 0.0, 1.0);
        out.fragPos = in.coord.xy;
        out.texUV = in.coord.zw;
        return out;
    }
    
*/
static const char vs_source_metal_macos[467] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x61,
    0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x63,0x6f,
    0x6f,0x72,0x64,0x2e,0x78,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x50,
    0x6f,0x73,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x74,0x65,0x78,0x55,0x56,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"
    
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct msdfUniform
    {
        float4 fgColor;
        float4 bgColor;
    };
    
    struct main0_out
    {
        float4 fragColor [[color(0)]];
    };
    
    struct main0_in
    {
        float2 texUV [[user(locn0)]];
    };
    
    static inline __attribute__((always_inline))
    float median(thread const float& r, thread const float& g, thread const float& b)
    {
        return fast::max(fast::min(r, g), fast::min(fast::max(r, g), b));
    }
    
    static inline __attribute__((always_inline))
    float screenPxRange(texture2d<float> atlas, sampler samp, thread float2& texUV)
    {
        return fast::max(0.5 * dot(float2(2.0) / float2(int2(atlas.get_width(), atlas.get_height())), float2(1.0) / fwidth(texUV)), 1.0);
    }
    
    fragment main0_out main0(main0_in in [[stage_in]], constant msdfUniform& _105 [[buffer(0)]], texture2d<float> atlas [[texture(0)]], sampler samp [[sampler(0)]])
    {
        main0_out out = {};
        float4 _74 = atlas.sample(samp, in.texUV);
        float param = _74.x;
        float param_1 = _74.y;
        float param_2 = _74.z;
        out.fragColor = mix(_105.bgColor, _105.fgColor, float4(fast::clamp(fma(screenPxRange(atlas, samp, in.texUV), median(param, param_1, param_2) - 0.5, 0.5), 0.0, 1.0)));
        return out;
    }
    
*/
static const char fs_source_metal_macos[1278] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x66,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x62,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,
    0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,
    0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,
    0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x26,0x20,0x72,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,0x67,0x2c,0x20,0x74,0x68,0x72,0x65,
    0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,
    0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,
    0x6d,0x69,0x6e,0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,0x66,0x61,0x73,0x74,0x3a,
    0x3a,0x6d,0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x72,
    0x2c,0x20,0x67,0x29,0x2c,0x20,0x62,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,
    0x61,0x74,0x6c,0x61,0x73,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,
    0x61,0x6d,0x70,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x26,0x20,0x74,0x65,0x78,0x55,0x56,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,
    0x78,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x32,0x2e,0x30,0x29,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x69,0x6e,0x74,0x32,0x28,0x61,0x74,0x6c,0x61,0x73,0x2e,0x67,0x65,0x74,0x5f,
    0x77,0x69,0x64,0x74,0x68,0x28,0x29,0x2c,0x20,0x61,0x74,0x6c,0x61,0x73,0x2e,0x67,
    0x65,0x74,0x5f,0x68,0x65,0x69,0x67,0x68,0x74,0x28,0x29,0x29,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x28,0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x66,0x77,0x69,
    0x64,0x74,0x68,0x28,0x74,0x65,0x78,0x55,0x56,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,
    0x74,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x26,0x20,0x5f,
    0x31,0x30,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x61,0x74,0x6c,0x61,0x73,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x20,0x73,0x61,0x6d,0x70,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x37,0x34,0x20,
    0x3d,0x20,0x61,0x74,0x6c,0x61,0x73,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,
    0x61,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x55,0x56,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,
    0x3d,0x20,0x5f,0x37,0x34,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x37,0x34,
    0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,0x31,0x30,0x35,0x2e,0x62,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x2c,0x20,0x5f,0x31,0x30,0x35,0x2e,0x66,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,
    0x63,0x6c,0x61,0x6d,0x70,0x28,0x66,0x6d,0x61,0x28,0x73,0x63,0x72,0x65,0x65,0x6e,
    0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,0x61,0x74,0x6c,0x61,0x73,0x2c,0x20,0x73,
    0x61,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x55,0x56,0x29,0x2c,0x20,
    0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x20,
    0x2d,0x20,0x30,0x2e,0x35,0x2c,0x20,0x30,0x2e,0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_METAL */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 texUV [[user(locn0)]];
        float2 fragPos [[user(locn1)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float4 coord [[attribute(0)]];
    };
    
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
        out.gl_Position = float4(in.coord.xy, 0.0, 1.0);
        out.fragPos = in.coord.xy;
        out.texUV = in.coord.zw;
        return out;
    }
    
*/
static const char vs_source_metal_ios[467] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x61,
    0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x63,0x6f,
    0x6f,0x72,0x64,0x2e,0x78,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x50,
    0x6f,0x73,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x74,0x65,0x78,0x55,0x56,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"
    
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct msdfUniform
    {
        float4 fgColor;
        float4 bgColor;
    };
    
    struct main0_out
    {
        float4 fragColor [[color(0)]];
    };
    
    struct main0_in
    {
        float2 texUV [[user(locn0)]];
    };
    
    static inline __attribute__((always_inline))
    float median(thread const float& r, thread const float& g, thread const float& b)
    {
        return fast::max(fast::min(r, g), fast::min(fast::max(r, g), b));
    }
    
    static inline __attribute__((always_inline))
    float screenPxRange(texture2d<float> atlas, sampler samp, thread float2& texUV)
    {
        return fast::max(0.5 * dot(float2(2.0) / float2(int2(atlas.get_width(), atlas.get_height())), float2(1.0) / fwidth(texUV)), 1.0);
    }
    
    fragment main0_out main0(main0_in in [[stage_in]], constant msdfUniform& _105 [[buffer(0)]], texture2d<float> atlas [[texture(0)]], sampler samp [[sampler(0)]])
    {
        main0_out out = {};
        float4 _74 = atlas.sample(samp, in.texUV);
        float param = _74.x;
        float param_1 = _74.y;
        float param_2 = _74.z;
        out.fragColor = mix(_105.bgColor, _105.fgColor, float4(fast::clamp(fma(screenPxRange(atlas, samp, in.texUV), median(param, param_1, param_2) - 0.5, 0.5), 0.0, 1.0)));
        return out;
    }
    
*/
static const char fs_source_metal_ios[1278] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x66,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x62,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,
    0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,
    0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,
    0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x26,0x20,0x72,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,0x67,0x2c,0x20,0x74,0x68,0x72,0x65,
    0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,
    0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,
    0x6d,0x69,0x6e,0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,0x66,0x61,0x73,0x74,0x3a,
    0x3a,0x6d,0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x72,
    0x2c,0x20,0x67,0x29,0x2c,0x20,0x62,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,
    0x61,0x74,0x6c,0x61,0x73,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,
    0x61,0x6d,0x70,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x26,0x20,0x74,0x65,0x78,0x55,0x56,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,
    0x78,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x32,0x2e,0x30,0x29,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x69,0x6e,0x74,0x32,0x28,0x61,0x74,0x6c,0x61,0x73,0x2e,0x67,0x65,0x74,0x5f,
    0x77,0x69,0x64,0x74,0x68,0x28,0x29,0x2c,0x20,0x61,0x74,0x6c,0x61,0x73,0x2e,0x67,
    0x65,0x74,0x5f,0x68,0x65,0x69,0x67,0x68,0x74,0x28,0x29,0x29,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x28,0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x66,0x77,0x69,
    0x64,0x74,0x68,0x28,0x74,0x65,0x78,0x55,0x56,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,
    0x74,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x26,0x20,0x5f,
    0x31,0x30,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x61,0x74,0x6c,0x61,0x73,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x20,0x73,0x61,0x6d,0x70,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x37,0x34,0x20,
    0x3d,0x20,0x61,0x74,0x6c,0x61,0x73,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,
    0x61,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x55,0x56,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,
    0x3d,0x20,0x5f,0x37,0x34,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x37,0x34,
    0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,0x31,0x30,0x35,0x2e,0x62,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x2c,0x20,0x5f,0x31,0x30,0x35,0x2e,0x66,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,
    0x63,0x6c,0x61,0x6d,0x70,0x28,0x66,0x6d,0x61,0x28,0x73,0x63,0x72,0x65,0x65,0x6e,
    0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,0x61,0x74,0x6c,0x61,0x73,0x2c,0x20,0x73,
    0x61,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x55,0x56,0x29,0x2c,0x20,
    0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x20,
    0x2d,0x20,0x30,0x2e,0x35,0x2c,0x20,0x30,0x2e,0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_METAL */
#if defined(SOKOL_METAL)
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 texUV [[user(locn0)]];
        float2 fragPos [[user(locn1)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float4 coord [[attribute(0)]];
    };
    
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
        out.gl_Position = float4(in.coord.xy, 0.0, 1.0);
        out.fragPos = in.coord.xy;
        out.texUV = in.coord.zw;
        return out;
    }
    
*/
static const char vs_source_metal_sim[467] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,
    0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x61,
    0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,
    0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x63,0x6f,
    0x6f,0x72,0x64,0x2e,0x78,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x50,
    0x6f,0x73,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x74,0x65,0x78,0x55,0x56,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"
    
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct msdfUniform
    {
        float4 fgColor;
        float4 bgColor;
    };
    
    struct main0_out
    {
        float4 fragColor [[color(0)]];
    };
    
    struct main0_in
    {
        float2 texUV [[user(locn0)]];
    };
    
    static inline __attribute__((always_inline))
    float median(thread const float& r, thread const float& g, thread const float& b)
    {
        return fast::max(fast::min(r, g), fast::min(fast::max(r, g), b));
    }
    
    static inline __attribute__((always_inline))
    float screenPxRange(texture2d<float> atlas, sampler samp, thread float2& texUV)
    {
        return fast::max(0.5 * dot(float2(2.0) / float2(int2(atlas.get_width(), atlas.get_height())), float2(1.0) / fwidth(texUV)), 1.0);
    }
    
    fragment main0_out main0(main0_in in [[stage_in]], constant msdfUniform& _105 [[buffer(0)]], texture2d<float> atlas [[texture(0)]], sampler samp [[sampler(0)]])
    {
        main0_out out = {};
        float4 _74 = atlas.sample(samp, in.texUV);
        float param = _74.x;
        float param_1 = _74.y;
        float param_2 = _74.z;
        out.fragColor = mix(_105.bgColor, _105.fgColor, float4(fast::clamp(fma(screenPxRange(atlas, samp, in.texUV), median(param, param_1, param_2) - 0.5, 0.5), 0.0, 1.0)));
        return out;
    }
    
*/
static const char fs_source_metal_sim[1278] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x66,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x62,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,
    0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,
    0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,
    0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x26,0x20,0x72,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,0x67,0x2c,0x20,0x74,0x68,0x72,0x65,
    0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,
    0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,
    0x6d,0x69,0x6e,0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,0x66,0x61,0x73,0x74,0x3a,
    0x3a,0x6d,0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x72,
    0x2c,0x20,0x67,0x29,0x2c,0x20,0x62,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,
    0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,
    0x61,0x74,0x6c,0x61,0x73,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,
    0x61,0x6d,0x70,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x26,0x20,0x74,0x65,0x78,0x55,0x56,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,
    0x78,0x28,0x30,0x2e,0x35,0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x32,0x2e,0x30,0x29,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x69,0x6e,0x74,0x32,0x28,0x61,0x74,0x6c,0x61,0x73,0x2e,0x67,0x65,0x74,0x5f,
    0x77,0x69,0x64,0x74,0x68,0x28,0x29,0x2c,0x20,0x61,0x74,0x6c,0x61,0x73,0x2e,0x67,
    0x65,0x74,0x5f,0x68,0x65,0x69,0x67,0x68,0x74,0x28,0x29,0x29,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x28,0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x66,0x77,0x69,
    0x64,0x74,0x68,0x28,0x74,0x65,0x78,0x55,0x56,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,
    0x74,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x26,0x20,0x5f,
    0x31,0x30,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x61,0x74,0x6c,0x61,0x73,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x20,0x73,0x61,0x6d,0x70,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x37,0x34,0x20,
    0x3d,0x20,0x61,0x74,0x6c,0x61,0x73,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,
    0x61,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x55,0x56,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,
    0x3d,0x20,0x5f,0x37,0x34,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x37,0x34,
    0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x37,0x34,0x2e,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,0x31,0x30,0x35,0x2e,0x62,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x2c,0x20,0x5f,0x31,0x30,0x35,0x2e,0x66,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,
    0x63,0x6c,0x61,0x6d,0x70,0x28,0x66,0x6d,0x61,0x28,0x73,0x63,0x72,0x65,0x65,0x6e,
    0x50,0x78,0x52,0x61,0x6e,0x67,0x65,0x28,0x61,0x74,0x6c,0x61,0x73,0x2c,0x20,0x73,
    0x61,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,0x74,0x65,0x78,0x55,0x56,0x29,0x2c,0x20,
    0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x20,
    0x2d,0x20,0x30,0x2e,0x35,0x2c,0x20,0x30,0x2e,0x35,0x29,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_METAL */
#if defined(SOKOL_WGPU)
/*
    diagnostic(off, derivative_uniformity);
    
    struct msdfUniform {
      /_ @offset(0) _/
      fgColor : vec4f,
      /_ @offset(16) _/
      bgColor : vec4f,
    }
    
    var<private> coord : vec4f;
    
    var<private> fragPos : vec2f;
    
    var<private> texUV : vec2f;
    
    @group(0) @binding(0) var<uniform> x_37 : msdfUniform;
    
    var<private> gl_Position : vec4f;
    
    fn main_1() {
      let x_19 : vec4f = coord;
      let x_20 : vec2f = vec2f(x_19.x, x_19.y);
      gl_Position = vec4f(x_20.x, x_20.y, 0.0f, 1.0f);
      let x_30 : vec4f = coord;
      fragPos = vec2f(x_30.x, x_30.y);
      let x_33 : vec4f = coord;
      texUV = vec2f(x_33.z, x_33.w);
      return;
    }
    
    struct main_out {
      @builtin(position)
      gl_Position : vec4f,
      @location(1)
      fragPos_1 : vec2f,
      @location(0)
      texUV_1 : vec2f,
    }
    
    @vertex
    fn main(@location(0) coord_param : vec4f) -> main_out {
      coord = coord_param;
      main_1();
      return main_out(gl_Position, fragPos, texUV);
    }
    
*/
static const char vs_source_wgsl[882] = {
    0x64,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x28,0x6f,0x66,0x66,0x2c,0x20,
    0x64,0x65,0x72,0x69,0x76,0x61,0x74,0x69,0x76,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x69,0x74,0x79,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x7b,0x0a,0x20,0x20,
    0x2f,0x2a,0x20,0x40,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x30,0x29,0x20,0x2a,0x2f,
    0x0a,0x20,0x20,0x66,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x34,0x66,0x2c,0x0a,0x20,0x20,0x2f,0x2a,0x20,0x40,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x28,0x31,0x36,0x29,0x20,0x2a,0x2f,0x0a,0x20,0x20,0x62,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x76,0x61,
    0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x63,0x6f,0x6f,0x72,0x64,
    0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,
    0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,
    0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,
    0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x3a,0x20,0x76,
    0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,0x40,0x67,0x72,0x6f,0x75,0x70,0x28,0x30,0x29,
    0x20,0x40,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x28,0x30,0x29,0x20,0x76,0x61,0x72,
    0x3c,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x3e,0x20,0x78,0x5f,0x33,0x37,0x20,0x3a,
    0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x3b,0x0a,0x0a,0x76,
    0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,
    0x0a,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,0x29,0x20,0x7b,0x0a,
    0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x39,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x34,0x66,0x20,0x3d,0x20,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x6c,0x65,
    0x74,0x20,0x78,0x5f,0x32,0x30,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x32,0x66,0x28,0x78,0x5f,0x31,0x39,0x2e,0x78,0x2c,0x20,0x78,
    0x5f,0x31,0x39,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x66,0x28,0x78,0x5f,
    0x32,0x30,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x32,0x30,0x2e,0x79,0x2c,0x20,0x30,0x2e,
    0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,
    0x20,0x78,0x5f,0x33,0x30,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x20,0x3d,0x20,
    0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x66,0x28,0x78,0x5f,0x33,0x30,0x2e,0x78,0x2c,
    0x20,0x78,0x5f,0x33,0x30,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x33,0x33,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x20,0x3d,0x20,0x63,
    0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x74,0x65,0x78,0x55,0x56,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x32,0x66,0x28,0x78,0x5f,0x33,0x33,0x2e,0x7a,0x2c,0x20,0x78,0x5f,
    0x33,0x33,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x5f,
    0x6f,0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,0x40,0x62,0x75,0x69,0x6c,0x74,0x69,0x6e,
    0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,0x0a,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,
    0x2c,0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x31,0x29,
    0x0a,0x20,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x5f,0x31,0x20,0x3a,0x20,0x76,
    0x65,0x63,0x32,0x66,0x2c,0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x28,0x30,0x29,0x0a,0x20,0x20,0x74,0x65,0x78,0x55,0x56,0x5f,0x31,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x32,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x40,0x76,0x65,0x72,0x74,
    0x65,0x78,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x28,0x40,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,0x20,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x29,0x20,0x2d,0x3e,0x20,
    0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,0x63,0x6f,0x6f,
    0x72,0x64,0x20,0x3d,0x20,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x3b,0x0a,0x20,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,0x29,0x3b,0x0a,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x28,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x66,0x72,0x61,
    0x67,0x50,0x6f,0x73,0x2c,0x20,0x74,0x65,0x78,0x55,0x56,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
/*
    diagnostic(off, derivative_uniformity);
    
    struct msdfUniform {
      /_ @offset(0) _/
      fgColor : vec4f,
      /_ @offset(16) _/
      bgColor : vec4f,
    }
    
    @group(1) @binding(32) var atlas : texture_2d<f32>;
    
    @group(1) @binding(48) var samp : sampler;
    
    var<private> texUV : vec2f;
    
    var<private> fragColor : vec4f;
    
    @group(0) @binding(4) var<uniform> x_105 : msdfUniform;
    
    var<private> fragPos : vec2f;
    
    fn median_f1_f1_f1_(r : ptr<function, f32>, g : ptr<function, f32>, b : ptr<function, f32>) -> f32 {
      let x_17 : f32 = *(r);
      let x_18 : f32 = *(g);
      let x_20 : f32 = *(r);
      let x_21 : f32 = *(g);
      let x_23 : f32 = *(b);
      return max(min(x_17, x_18), min(max(x_20, x_21), x_23));
    }
    
    fn screenPxRange_() -> f32 {
      var unitRange : vec2f;
      var screenTexSize : vec2f;
      let x_46 : vec2i = vec2i(textureDimensions(atlas, 0i));
      unitRange = (vec2f(2.0f, 2.0f) / vec2f(x_46));
      let x_55 : vec2f = texUV;
      screenTexSize = (vec2f(1.0f, 1.0f) / fwidth(x_55));
      let x_59 : vec2f = unitRange;
      let x_60 : vec2f = screenTexSize;
      return max((0.5f * dot(x_59, x_60)), 1.0f);
    }
    
    fn main_1() {
      var msd : vec3f;
      var dist : f32;
      var param : f32;
      var param_1 : f32;
      var param_2 : f32;
      var pxDist : f32;
      var opacity : f32;
      let x_72 : vec2f = texUV;
      let x_74 : vec4f = textureSample(atlas, samp, x_72);
      msd = vec3f(x_74.x, x_74.y, x_74.z);
      let x_81 : f32 = msd.x;
      param = x_81;
      let x_85 : f32 = msd.y;
      param_1 = x_85;
      let x_89 : f32 = msd.z;
      param_2 = x_89;
      let x_90 : f32 = median_f1_f1_f1_(&(param), &(param_1), &(param_2));
      dist = x_90;
      let x_92 : f32 = screenPxRange_();
      let x_93 : f32 = dist;
      pxDist = (x_92 * (x_93 - 0.5f));
      let x_97 : f32 = pxDist;
      opacity = clamp((x_97 + 0.5f), 0.0f, 1.0f);
      let x_109 : vec4f = x_105.bgColor;
      let x_111 : vec4f = x_105.fgColor;
      let x_112 : f32 = opacity;
      fragColor = mix(x_109, x_111, vec4f(x_112, x_112, x_112, x_112));
      return;
    }
    
    struct main_out {
      @location(0)
      fragColor_1 : vec4f,
    }
    
    @fragment
    fn main(@location(0) texUV_param : vec2f, @location(1) fragPos_param : vec2f) -> main_out {
      texUV = texUV_param;
      fragPos = fragPos_param;
      main_1();
      return main_out(fragColor);
    }
    
*/
static const char fs_source_wgsl[2168] = {
    0x64,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x28,0x6f,0x66,0x66,0x2c,0x20,
    0x64,0x65,0x72,0x69,0x76,0x61,0x74,0x69,0x76,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x69,0x74,0x79,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x7b,0x0a,0x20,0x20,
    0x2f,0x2a,0x20,0x40,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x30,0x29,0x20,0x2a,0x2f,
    0x0a,0x20,0x20,0x66,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x34,0x66,0x2c,0x0a,0x20,0x20,0x2f,0x2a,0x20,0x40,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x28,0x31,0x36,0x29,0x20,0x2a,0x2f,0x0a,0x20,0x20,0x62,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x40,0x67,
    0x72,0x6f,0x75,0x70,0x28,0x31,0x29,0x20,0x40,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,
    0x28,0x33,0x32,0x29,0x20,0x76,0x61,0x72,0x20,0x61,0x74,0x6c,0x61,0x73,0x20,0x3a,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x32,0x64,0x3c,0x66,0x33,0x32,0x3e,
    0x3b,0x0a,0x0a,0x40,0x67,0x72,0x6f,0x75,0x70,0x28,0x31,0x29,0x20,0x40,0x62,0x69,
    0x6e,0x64,0x69,0x6e,0x67,0x28,0x34,0x38,0x29,0x20,0x76,0x61,0x72,0x20,0x73,0x61,
    0x6d,0x70,0x20,0x3a,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x76,
    0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x74,0x65,0x78,0x55,
    0x56,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,
    0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,
    0x6f,0x72,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x0a,0x40,0x67,0x72,
    0x6f,0x75,0x70,0x28,0x30,0x29,0x20,0x40,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x28,
    0x34,0x29,0x20,0x76,0x61,0x72,0x3c,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x3e,0x20,
    0x78,0x5f,0x31,0x30,0x35,0x20,0x3a,0x20,0x6d,0x73,0x64,0x66,0x55,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,
    0x65,0x3e,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x32,0x66,0x3b,0x0a,0x0a,0x66,0x6e,0x20,0x6d,0x65,0x64,0x69,0x61,0x6e,0x5f,0x66,
    0x31,0x5f,0x66,0x31,0x5f,0x66,0x31,0x5f,0x28,0x72,0x20,0x3a,0x20,0x70,0x74,0x72,
    0x3c,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x66,0x33,0x32,0x3e,0x2c,
    0x20,0x67,0x20,0x3a,0x20,0x70,0x74,0x72,0x3c,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,
    0x6e,0x2c,0x20,0x66,0x33,0x32,0x3e,0x2c,0x20,0x62,0x20,0x3a,0x20,0x70,0x74,0x72,
    0x3c,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x66,0x33,0x32,0x3e,0x29,
    0x20,0x2d,0x3e,0x20,0x66,0x33,0x32,0x20,0x7b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x31,0x37,0x20,0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,0x20,0x2a,0x28,0x72,
    0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x38,0x20,0x3a,0x20,
    0x66,0x33,0x32,0x20,0x3d,0x20,0x2a,0x28,0x67,0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,
    0x74,0x20,0x78,0x5f,0x32,0x30,0x20,0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,0x20,0x2a,
    0x28,0x72,0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x31,0x20,
    0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,0x20,0x2a,0x28,0x67,0x29,0x3b,0x0a,0x20,0x20,
    0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x33,0x20,0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,
    0x20,0x2a,0x28,0x62,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6d,0x61,0x78,0x28,0x6d,0x69,0x6e,0x28,0x78,0x5f,0x31,0x37,0x2c,0x20,0x78,0x5f,
    0x31,0x38,0x29,0x2c,0x20,0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x78,0x5f,0x32,
    0x30,0x2c,0x20,0x78,0x5f,0x32,0x31,0x29,0x2c,0x20,0x78,0x5f,0x32,0x33,0x29,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6e,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x50,0x78,
    0x52,0x61,0x6e,0x67,0x65,0x5f,0x28,0x29,0x20,0x2d,0x3e,0x20,0x66,0x33,0x32,0x20,
    0x7b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x75,0x6e,0x69,0x74,0x52,0x61,0x6e,0x67,
    0x65,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,
    0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x54,0x65,0x78,0x53,0x69,0x7a,0x65,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,
    0x34,0x36,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x69,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x32,0x69,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x44,0x69,0x6d,0x65,0x6e,0x73,
    0x69,0x6f,0x6e,0x73,0x28,0x61,0x74,0x6c,0x61,0x73,0x2c,0x20,0x30,0x69,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x75,0x6e,0x69,0x74,0x52,0x61,0x6e,0x67,0x65,0x20,0x3d,0x20,
    0x28,0x76,0x65,0x63,0x32,0x66,0x28,0x32,0x2e,0x30,0x66,0x2c,0x20,0x32,0x2e,0x30,
    0x66,0x29,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x66,0x28,0x78,0x5f,0x34,0x36,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x35,0x35,0x20,0x3a,0x20,
    0x76,0x65,0x63,0x32,0x66,0x20,0x3d,0x20,0x74,0x65,0x78,0x55,0x56,0x3b,0x0a,0x20,
    0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x54,0x65,0x78,0x53,0x69,0x7a,0x65,0x20,0x3d,
    0x20,0x28,0x76,0x65,0x63,0x32,0x66,0x28,0x31,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,
    0x30,0x66,0x29,0x20,0x2f,0x20,0x66,0x77,0x69,0x64,0x74,0x68,0x28,0x78,0x5f,0x35,
    0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x35,0x39,0x20,
    0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x20,0x3d,0x20,0x75,0x6e,0x69,0x74,0x52,0x61,
    0x6e,0x67,0x65,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x36,0x30,0x20,
    0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x20,0x3d,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,
    0x54,0x65,0x78,0x53,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x6d,0x61,0x78,0x28,0x28,0x30,0x2e,0x35,0x66,0x20,0x2a,0x20,0x64,0x6f,
    0x74,0x28,0x78,0x5f,0x35,0x39,0x2c,0x20,0x78,0x5f,0x36,0x30,0x29,0x29,0x2c,0x20,
    0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,
    0x6e,0x5f,0x31,0x28,0x29,0x20,0x7b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x6d,0x73,
    0x64,0x20,0x3a,0x20,0x76,0x65,0x63,0x33,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,
    0x20,0x64,0x69,0x73,0x74,0x20,0x3a,0x20,0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,
    0x61,0x72,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x66,0x33,0x32,0x3b,0x0a,
    0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3a,0x20,
    0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x20,0x3a,0x20,0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,
    0x70,0x78,0x44,0x69,0x73,0x74,0x20,0x3a,0x20,0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,
    0x76,0x61,0x72,0x20,0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x20,0x3a,0x20,0x66,0x33,
    0x32,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x37,0x32,0x20,0x3a,0x20,
    0x76,0x65,0x63,0x32,0x66,0x20,0x3d,0x20,0x74,0x65,0x78,0x55,0x56,0x3b,0x0a,0x20,
    0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x37,0x34,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,
    0x66,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x28,0x61,0x74,0x6c,0x61,0x73,0x2c,0x20,0x73,0x61,0x6d,0x70,0x2c,0x20,0x78,
    0x5f,0x37,0x32,0x29,0x3b,0x0a,0x20,0x20,0x6d,0x73,0x64,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x33,0x66,0x28,0x78,0x5f,0x37,0x34,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x37,0x34,
    0x2e,0x79,0x2c,0x20,0x78,0x5f,0x37,0x34,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x6c,
    0x65,0x74,0x20,0x78,0x5f,0x38,0x31,0x20,0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,0x20,
    0x6d,0x73,0x64,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,
    0x20,0x78,0x5f,0x38,0x31,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x38,
    0x35,0x20,0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,0x20,0x6d,0x73,0x64,0x2e,0x79,0x3b,
    0x0a,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x78,0x5f,0x38,
    0x35,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x38,0x39,0x20,0x3a,0x20,
    0x66,0x33,0x32,0x20,0x3d,0x20,0x6d,0x73,0x64,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x78,0x5f,0x38,0x39,0x3b,0x0a,0x20,
    0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x39,0x30,0x20,0x3a,0x20,0x66,0x33,0x32,0x20,
    0x3d,0x20,0x6d,0x65,0x64,0x69,0x61,0x6e,0x5f,0x66,0x31,0x5f,0x66,0x31,0x5f,0x66,
    0x31,0x5f,0x28,0x26,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x2c,0x20,0x26,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x2c,0x20,0x26,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x29,0x29,0x3b,0x0a,0x20,0x20,0x64,0x69,0x73,0x74,0x20,0x3d,0x20,0x78,
    0x5f,0x39,0x30,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x39,0x32,0x20,
    0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,0x20,0x73,0x63,0x72,0x65,0x65,0x6e,0x50,0x78,
    0x52,0x61,0x6e,0x67,0x65,0x5f,0x28,0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x39,0x33,0x20,0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,0x20,0x64,0x69,0x73,
    0x74,0x3b,0x0a,0x20,0x20,0x70,0x78,0x44,0x69,0x73,0x74,0x20,0x3d,0x20,0x28,0x78,
    0x5f,0x39,0x32,0x20,0x2a,0x20,0x28,0x78,0x5f,0x39,0x33,0x20,0x2d,0x20,0x30,0x2e,
    0x35,0x66,0x29,0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x39,0x37,
    0x20,0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,0x20,0x70,0x78,0x44,0x69,0x73,0x74,0x3b,
    0x0a,0x20,0x20,0x6f,0x70,0x61,0x63,0x69,0x74,0x79,0x20,0x3d,0x20,0x63,0x6c,0x61,
    0x6d,0x70,0x28,0x28,0x78,0x5f,0x39,0x37,0x20,0x2b,0x20,0x30,0x2e,0x35,0x66,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,
    0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x30,0x39,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x34,0x66,0x20,0x3d,0x20,0x78,0x5f,0x31,0x30,0x35,0x2e,0x62,0x67,0x43,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x31,0x31,0x20,
    0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x20,0x3d,0x20,0x78,0x5f,0x31,0x30,0x35,0x2e,
    0x66,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,
    0x5f,0x31,0x31,0x32,0x20,0x3a,0x20,0x66,0x33,0x32,0x20,0x3d,0x20,0x6f,0x70,0x61,
    0x63,0x69,0x74,0x79,0x3b,0x0a,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x78,0x5f,0x31,0x30,0x39,0x2c,0x20,0x78,
    0x5f,0x31,0x31,0x31,0x2c,0x20,0x76,0x65,0x63,0x34,0x66,0x28,0x78,0x5f,0x31,0x31,
    0x32,0x2c,0x20,0x78,0x5f,0x31,0x31,0x32,0x2c,0x20,0x78,0x5f,0x31,0x31,0x32,0x2c,
    0x20,0x78,0x5f,0x31,0x31,0x32,0x29,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x5f,0x6f,0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,0x0a,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x2c,0x0a,0x7d,
    0x0a,0x0a,0x40,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x0a,0x66,0x6e,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,
    0x20,0x74,0x65,0x78,0x55,0x56,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,
    0x65,0x63,0x32,0x66,0x2c,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,
    0x31,0x29,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x29,0x20,0x2d,0x3e,0x20,0x6d,0x61,0x69,
    0x6e,0x5f,0x6f,0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,0x74,0x65,0x78,0x55,0x56,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x55,0x56,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,
    0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x50,
    0x6f,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x6d,0x61,0x69,0x6e,
    0x5f,0x31,0x28,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,
    0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x28,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_WGPU */
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before msdf_shader.h"
#endif
static inline const sg_shader_desc* msdf_shader_desc(sg_backend backend) {
  #if defined(SOKOL_GLCORE33)
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "coord";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "msdfUniform";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.fs.image_sampler_pairs[0].glsl_name = "atlas_samp";
      desc.label = "msdf_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLCORE33 */
  #if defined(SOKOL_GLES3)
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "coord";
      desc.vs.source = vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "msdfUniform";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.fs.image_sampler_pairs[0].glsl_name = "atlas_samp";
      desc.label = "msdf_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  #if defined(SOKOL_D3D11)
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.vs.source = vs_source_hlsl4;
      desc.vs.d3d11_target = "vs_4_0";
      desc.vs.entry = "main";
      desc.fs.source = fs_source_hlsl4;
      desc.fs.d3d11_target = "ps_4_0";
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.label = "msdf_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_D3D11 */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.fs.source = fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.label = "msdf_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_IOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_source_metal_ios;
      desc.vs.entry = "main0";
      desc.fs.source = fs_source_metal_ios;
      desc.fs.entry = "main0";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.label = "msdf_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  #if defined(SOKOL_METAL)
  if (backend == SG_BACKEND_METAL_SIMULATOR) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_source_metal_sim;
      desc.vs.entry = "main0";
      desc.fs.source = fs_source_metal_sim;
      desc.fs.entry = "main0";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.label = "msdf_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_METAL */
  #if defined(SOKOL_WGPU)
  if (backend == SG_BACKEND_WGPU) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = vs_source_wgsl;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 32;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.source = fs_source_wgsl;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.label = "msdf_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_WGPU */
  return 0;
}
